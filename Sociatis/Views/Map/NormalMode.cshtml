@model Sociatis.Models.Map.MapNormalViewModel
@{
    ViewBag.Title = "Political map";
}

<div class="ContentBox forMap">
    <div id="map" style="width: 100%; height: 100%;">

    </div>
    <h1>
        @System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;<br />
        @System.Globalization.CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalSeparator;<br />
        @System.Globalization.CultureInfo.CurrentCulture.NumberFormat.PercentDecimalSeparator;<br />

        @System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.NumberDecimalSeparator;<br />
        @System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.CurrencyDecimalSeparator;<br />
        @System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.PercentDecimalSeparator;<br />

        @System.Globalization.CultureInfo.DefaultThreadCurrentCulture.NumberFormat.NumberDecimalSeparator;<br />
        @System.Globalization.CultureInfo.DefaultThreadCurrentCulture.NumberFormat.CurrencyDecimalSeparator;<br />
        @System.Globalization.CultureInfo.DefaultThreadCurrentCulture.NumberFormat.PercentDecimalSeparator;<br />

        @System.Globalization.CultureInfo.DefaultThreadCurrentUICulture.NumberFormat.NumberDecimalSeparator;<br />
        @System.Globalization.CultureInfo.DefaultThreadCurrentUICulture.NumberFormat.CurrencyDecimalSeparator;<br />
        @System.Globalization.CultureInfo.DefaultThreadCurrentUICulture.NumberFormat.PercentDecimalSeparator;<br />
    </h1>

</div>


@section scripts
{
    @Scripts.Render("~/Scripts/Map/sociatis.map.js")
    @Scripts.Render("~/Scripts/Map/leaflet.js")
    @Scripts.Render("~/Scripts/Map/bing.js")

    <script>
        $(() => {
            Sociatis.Map.GeoJSON = {
                "type": "FeatureCollection",
                "features" : [
            @foreach (var region in Model.Items)
            {
                <text>
                    {
                        "type": "Feature",
                        "properties": {
                            "name": @region.RegionName.ToJavascriptString(),
                            "id": @region.RegionID,
                            "color": @region.RegionColor.ToJavascriptString(),
                            "neighbours" : @region.Neighbours.ToJavascriptArray(n => n)
            },
                        "geometry": {
                            "type": "Polygon",
                            "coordinates": [@region.Points.ToJavascriptArray(p => p.Longitude, p => p.Latitude)]
                }
                    },
                </text>

                }
                ]
            };

            var info = L.control();

            info.onAdd = function (map) {
                this._div = L.DomUtil.create('div', 'leaflet-info'); // create a div with a class "info"
                this.update();
                return this._div;
            };

            var regionInfoTemplate = $.templates("#regionInfoTemplate");
            // method that we will use to update the control based on feature properties passed
            info.update = function (props) {
                let requestID = Sociatis.Map.RegionInfoRequestNo++;

                this._div.innerHTML = '<h4>Region info</h4>' + (props ?
                    '<b>' + props.name + "</b><br />" +
                    "<div data-loadregionid='" + requestID+"'>Loading...</div>"
                    : 'Hover over a region');

                if(props)
                $.postJSON(Sociatis.GetAdress("GetRegionSummary", "Map", [{ Name: "regionID", Value: props.id }]), {},
                    data => {
                        if (data.CountryName) {
                            var htmlOutput = regionInfoTemplate.render(data);
                            $("div[data-loadregionid='" + requestID + "']").html(htmlOutput);
                        }
                    });

            };

            Sociatis.Map.Style = feature => {
                return {
                    fillColor: feature.properties.color,
                    color: "#000000",
                    weight: 2,
                    opacity: 1,
                    fillOpacity: 0.85,
                   // dashArray: '3'
                }
            }

            Sociatis.Map.RegionInfoRequestNo = 0;

            let hightlightNeighbours = neighbours => {
                $.each(Sociatis.Map.LGeoJSON._layers, (i, e) => {
                    var props = e.feature.properties;
                    var index = neighbours.indexOf(props.id);

                    if (index >= 0) {

                        e.setStyle({
                            weight: 5,
                            color: '#666',
                            dashArray: '',
                            fillOpacity: 0.85
                        });

                        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                            e.bringToFront();
                        }
                    }
                });
            }

            let resetNeighboursHighlight = neighbours => {
                $.each(Sociatis.Map.LGeoJSON._layers, (i, e) => {
                    var props = e.feature.properties;
                    var index = neighbours.indexOf(props.id);

                    if (index >= 0) {
                        Sociatis.Map.LGeoJSON.resetStyle(e);
                    }
                });
            }

            let _reset = Sociatis.Map.ResetHighlight;
            Sociatis.Map.ResetHighlight = e => {
                _reset(e);
                info.update();

                resetNeighboursHighlight(e.target.feature.properties.neighbours);
            }

            let _highlight = Sociatis.Map.Highlight;
            Sociatis.Map.Highlight = e => {
                hightlightNeighbours(e.target.feature.properties.neighbours);
                _highlight(e);
                info.update(e.target.feature.properties);

               
            }

            Sociatis.Map.InitializeGeoJSON("map", Sociatis.Map.Style);
            info.addTo(Sociatis.Map.Earth);

        });
    </script>

<script id="regionInfoTemplate" type="text/x-jsrender">
    <div>
         Population: {{:Population}} <br/>
         {{:CountryName}} <br/>

        <label class="bar-label text-center">Developement</label>
        <div class="container-bar">
            <div class="bar" style="width : {{:Developement}}%; background-color : blue">
            </div>
        </div>
        {{if Resources.length>0}}
        <h4>Resources</h4>
        {{/if}}
        <ul>
            {{for Resources}}
            <li>{{:ResourceName}} - {{:ResourceQuality}}</li>
            {{/for}}
        </ul>

        {{if Neighbours.length>0}}
        <h4>Neighbours</h4>
        {{/if}}
        <ul>
            {{for Neighbours}}
            <li>{{:RegionName}} - {{:Distance}}km</li>
            {{/for}}
        </ul>
    </div>
</script>

}