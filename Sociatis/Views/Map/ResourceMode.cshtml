@model Sociatis.Models.Map.MapResourceViewModel
@using Fertility = Entities.enums.ResourceFertilityEnum
@{
    ViewBag.Title = Model.ResourceName.FirstToUpper() + " map";
}

<div class="ContentBox forMap">
    <div id="map" style="width: 100%; height: 100%;">

    </div>

</div>


@section scripts
{
    @Scripts.Render("~/Scripts/Map/sociatis.map.js")
    @Scripts.Render("~/Scripts/Map/leaflet.js")
    @Scripts.Render("~/Scripts/Map/bing.js")

    <script>
        $(() => {
            Sociatis.Map.GeoJSON = {
                "type": "FeatureCollection",
                "features": [
            @foreach (var region in Model.Items)
            {
                <text>
                    {
                        "type": "Feature",
                        "properties": {
                            "name": @region.RegionName.ToJavascriptString(),
                            "resourceQuality": @region.ResourceQuality
            },
                        "geometry": {
                            "type": "Polygon",
                            "coordinates": [@region.Points.ToJavascriptArray(p => p.Longitude, p => p.Latitude)]
                        }
                    },
                </text>

                }
                ]
            };

            var info = L.control();

            info.onAdd = function (map) {
                this._div = L.DomUtil.create('div', 'leaflet-info'); // create a div with a class "info"
                this.update();
                return this._div;
            };

            function getResourceQuality(quality) {
                switch (quality) {

                    case 0:
                        return @Fertility.None.ToJavascriptString();
                    case 1:
                        return @Fertility.Scarce.ToJavascriptString();
                    case 2:
                        return @Fertility.Normal.ToJavascriptString();
                    case 3:
                        return @Fertility.Good.ToJavascriptString();
                    case 4:
                        return @Fertility.Abundant.ToJavascriptString();
                }
            }

            // method that we will use to update the control based on feature properties passed
            info.update = function (props) {
                this._div.innerHTML = '<h4>@Model.ResourceName</h4>' + (props ?
                    '<b>' + props.name + '</b><br />' + getResourceQuality(props.resourceQuality)
                    : 'Hover over a region');
            };

            var legend = L.control({ position: 'bottomright' });

            legend.onAdd = function (map) {

                var div = L.DomUtil.create('div', 'leaflet-info leaflet-legend'),
                    labels = [];

                // loop through our density intervals and generate a label with a colored square for each interval
                for (var i = 0; i < @(Enum.GetValues(typeof(Fertility)).Cast<int>().Last() + 1); i++) {
                    div.innerHTML +=
                        '<i style="background:' + colors[i] + '"></i> ' +
                    getResourceQuality(i) + '<br>';
                }

                return div;
            };



            let colors = @Model.ColorScale.ToJavascriptArray(c => c.ToJavascriptString());


            Sociatis.Map.Style = feature => {
                return {
                    fillColor: colors[feature.properties.resourceQuality],
                    weight: 2,
                    opacity: 1,
                    fillOpacity: 0.85,
                    // dashArray: '3'
                }
            }

            let _reset = Sociatis.Map.ResetHighlight;
            Sociatis.Map.ResetHighlight = e => {
                _reset(e);
                info.update();
            }

            let _highlight = Sociatis.Map.Highlight;
            Sociatis.Map.Highlight = e => {
                _highlight(e);
                info.update(e.target.feature.properties);
            }

            Sociatis.Map.InitializeGeoJSON("map", Sociatis.Map.Style);
            info.addTo(Sociatis.Map.Earth);
            legend.addTo(Sociatis.Map.Earth);

        });
    </script>

}