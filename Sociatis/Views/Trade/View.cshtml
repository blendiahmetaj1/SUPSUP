@model Sociatis.Models.Trades.TradeViewModel
@using Entities.enums;
@{
    ViewBag.Title = "Trade #" + Model.ID;
    Random rand = new Random();
    ScriptInjector.AddJavascript("Sociatis.Trade.ActualTradeID=" + Model.ID);
}


<div id="tradeView" class="contentBox">
    <h5>@ViewBag.Title</h5>

    @if (Model.TradeStatus == TradeStatusEnum.Abort)
    {
        <div class="tradeAborted tradeStatus">
            Cancelled
        </div>
    }
    @if (Model.TradeStatus == TradeStatusEnum.Cancel)
    {
        <div class="tradeCancelled tradeStatus">
            Cancelled
        </div>
    }
    @if (Model.TradeStatus == TradeStatusEnum.Success)
    {
        <div class="tradeSuccess tradeStatus">
            Finished
        </div>
    }
    @if (Model.TradeStatus == TradeStatusEnum.Ongoing)
    {
        <div class="tradeActive tradeStatus">
            Active
        </div>
    }
    <div class="tradeOffer">
        <div class="tradeColumn">
            <div class="tradeWho">
                @Html.ActionLink(Model.SourceName, "View", "Entity", new { entityID = Model.SourceID }, null)
            </div>
            @if (Model.SourceAccepted)
            {
                <div class="tradeAccepted">
                    Accepted
                </div>
            }
            @if (Model.TradeSide == TradeSideEnum.Source && Model.FuelCost > 0)
            {
                <div class="fuelCost">
                    Fuel needed: @Model.FuelCost
                </div>
            }

            <div class="tradeItems">
                <div class="row small-up-1 medium-up-2 large-up-3">
                    @Html.DisplayFor(m => m.SourceItems)
                </div>
            </div>
           
        </div>
        <div class="tradeGap">
            @using (Html.BeginForm("AcceptTrade", RouteDataHelper.ControllerName, new { tradeID = Model.ID }, FormMethod.Post))
            {
                if (Model.CanAccept)
                {
                    <button type="submit" class="button green">Accept</button>
                }
                else
                {
                    <button type="button" class="button green disabled">Accept</button>
                }
            }
            @using (Html.BeginForm("CancelTrade", RouteDataHelper.ControllerName, new { tradeID = Model.ID }, FormMethod.Post))
            {
                if (Model.CanCancel)
                {
                    <button type="submit" class="button red">Cancel</button>
                }
                else
                {
                    <button type="button" class="button red disabled">Cancel</button>
                }
            }
        </div>
        <div class="tradeColumn">
            <div class="tradeWho">
                @Html.ActionLink(Model.DestinationName, "View", "Entity", new { entityID = Model.DestinationID }, null)
            </div>
            @if (Model.DestinationAccepted)
            {
                <div class="tradeAccepted">
                    Accepted
                </div>
            }
            @if (Model.TradeSide == TradeSideEnum.Destination && Model.FuelCost > 0)
            {
                <div class="fuelCost">
                    Fuel needed: @Model.FuelCost
                </div>
            }

            <div class="tradeItems">
                <div class="row small-up-1 medium-up-2 large-up-3">
                    @Html.DisplayFor(m => m.DestinationItems)
                </div>
            </div>

            
        </div>
    </div>

    <ul class="giftHeader tabs" data-tabs id="giftTabs">
        <li class="giftTypeSelector tabs-title tabs-title-2 is-active">
            <a href="#moneyList" aria-selected="true">Money</a>
        </li>
        @if (Model.CanSendProducts)
        {
            <li class="giftTypeSelector tabs-title tabs-title-2">
                <a onclick="Sociatis.Gifts.OnDestinationChange()" href="#productList" data-tabs-target="productList" aria-selected="true">Product</a>
            </li>
        }
    </ul>

    <div class="tabs-content" data-tabs-content="giftTabs">
        <div class="tabs-panel is-active" id="moneyList">
            @foreach (var money in Model.MoneyToTrade)
            {
                <div class="exchangeItem exchangeMoney flex">
                    <div class="centerVerticalFlex">
                        <div class="centerVerticalFlex">
                            <div class="money">
                                @Html.DisplayFor(m => money.MoneyImage)
                            </div>
                            <div class="moneyAmount inputGroup">
                                <input class="noMargin" data-symbol="@money.Symbol" data-currencyid="@money.CurrencyID" type="number" step="0.01" value="@money.Amount" min="0.01" max="@money.Amount" />
                                <div class="inputInfo noMargin noselect">
                                    @money.Symbol
                                </div>
                                <button onclick="Sociatis.Trade.SetMaxMoney(@money.CurrencyID)" type="button" class="max button blue">Max value</button>
                                @if (Model.TradeStatus == TradeStatusEnum.Ongoing)
                                {

                                    <button onclick="Sociatis.Trade.AddMoney(@Model.ID, @money.CurrencyID)" type="button" class="button green moneySendButton">Add</button>
                                }
                                else
                                {
                                    <button class="button green moneySendButton disabled">Add</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        @if (Model.CanSendProducts)
            {
            <div class="tabs-panel" id="productList">
                @foreach (var product in Model.ProductToTrade)
                {
                    <div class="exchangeItem exchangeProduct flex">
                        <div class="centerVerticalFlex">
                            <div class="exchangeProductImage has-tip" data-tooltip data-position="right" data-alignment="center" aria-haspopup="true" title="@product.ProductName">
                                @Html.DisplayFor(m => product.ProductImage)
                                <div class="quality">
                                    @for (int i = 0; i < product.Quality; ++i)
                                    {
                                        <i class="fa fa-star"></i>
                                    }
                                </div>
                            </div>
                            <div class="productAmount inputGroup">
                                <input onchange="Sociatis.Gifts.RecalculateFuel(this)" class="noMargin" data-productname="@product.ProductName" data-productid="@product.ProductID" data-quality="@product.Quality" size="1" type="number" step="1" value="1" max="@product.Amount" min="1" />
                                <div class="inputInfo noMargin noselect">
                                    @product.ProductName Q@(product.Quality)
                                </div>
                            </div>
                        </div>
                        <button onclick="Sociatis.Trade.SetMaxProduct(@product.ProductID, @product.Quality)" type="button" class="max button blue">Max value</button>
                        @if (Model.TradeStatus == TradeStatusEnum.Ongoing)
                        {
                            <button data-position="right" onclick="Sociatis.Trade.AddProduct(@product.ProductID, @product.Quality, '@product.ProductName')" type="button" class="button green productSendButton">
                                Add
                            </button>
                        }
                        else
                        {
                            <button class="button green disabled productSendButton">Add</button>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>


@section scripts
{
    <script src="~/Scripts/trade/sociatis.trade.js"></script>
}